# Generated by Django 5.1.2 on 2024-10-24 09:05

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='RailwayStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=25, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RouteStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='railway.route')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='railway.railwaystation')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='route',
            name='stations',
            field=models.ManyToManyField(blank=True, related_name='routes', through='railway.RouteStation', to='railway.railwaystation'),
        ),
        migrations.CreateModel(
            name='Train',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=6)),
                ('type', models.CharField(choices=[('CT', 'Cargo Train'), ('PT', 'Passenger Train')], default='PT', max_length=2)),
                ('reverse_sort_wagons', models.BooleanField(default=False)),
                ('route', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trains', to='railway.route')),
                ('station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trains', to='railway.railwaystation')),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('end_station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arrival_tickets', to='railway.railwaystation')),
                ('start_station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departure_tickets', to='railway.railwaystation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to=settings.AUTH_USER_MODEL)),
                ('train', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='railway.train')),
            ],
        ),
        migrations.CreateModel(
            name='TankWagon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(blank=True, validators=[django.core.validators.MaxValueValidator(999999)])),
                ('max_liters', models.FloatField()),
                ('train', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_wagons', to='railway.train')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SVWagon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(blank=True, validators=[django.core.validators.MaxValueValidator(999999)])),
                ('capacity', models.PositiveIntegerField(default=18)),
                ('train', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_wagons', to='railway.train')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SittingWagon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(blank=True, validators=[django.core.validators.MaxValueValidator(999999)])),
                ('capacity', models.PositiveIntegerField(default=42)),
                ('train', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_wagons', to='railway.train')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlatzWagon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(blank=True, validators=[django.core.validators.MaxValueValidator(999999)])),
                ('capacity', models.PositiveIntegerField(default=54)),
                ('train', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_wagons', to='railway.train')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CoupeWagon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(blank=True, validators=[django.core.validators.MaxValueValidator(999999)])),
                ('capacity', models.PositiveIntegerField(default=36)),
                ('train', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_wagons', to='railway.train')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='routestation',
            constraint=models.UniqueConstraint(fields=('route', 'station'), name='unique_station_per_route'),
        ),
        migrations.AddConstraint(
            model_name='routestation',
            constraint=models.UniqueConstraint(fields=('route', 'order'), name='unique_order_per_route'),
        ),
        migrations.AddConstraint(
            model_name='tankwagon',
            constraint=models.UniqueConstraint(fields=('train', 'number'), name='unique_tankwagon_number_per_train'),
        ),
        migrations.AddConstraint(
            model_name='svwagon',
            constraint=models.UniqueConstraint(fields=('train', 'number'), name='unique_svwagon_number_per_train'),
        ),
        migrations.AddConstraint(
            model_name='sittingwagon',
            constraint=models.UniqueConstraint(fields=('train', 'number'), name='unique_sittingwagon_number_per_train'),
        ),
        migrations.AddConstraint(
            model_name='platzwagon',
            constraint=models.UniqueConstraint(fields=('train', 'number'), name='unique_platzwagon_number_per_train'),
        ),
        migrations.AddConstraint(
            model_name='coupewagon',
            constraint=models.UniqueConstraint(fields=('train', 'number'), name='unique_coupewagon_number_per_train'),
        ),
    ]
